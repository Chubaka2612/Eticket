// <auto-generated />
using System;
using ETicket.Db.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETicket.Db.Dal.Migrations
{
    [DbContext(typeof(ETicketDbContext))]
    [Migration("20240424221750_UpdatePriceEntityName")]
    partial class UpdatePriceEntityName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ETicket.Db.Domain.Models.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.EventVenue", b =>
                {
                    b.Property<long>("VenueId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("VenueId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventVenue", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Manifest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Manifest", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PriceId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentStatusId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusId");

                    b.ToTable("PaymentStatus", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentStatusId = 0,
                            Name = "New"
                        },
                        new
                        {
                            PaymentStatusId = 1,
                            Name = "Completed"
                        },
                        new
                        {
                            PaymentStatusId = 2,
                            Name = "Failed"
                        });
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Price", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(14, 6)
                        .HasColumnType("decimal(14,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Row", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Row", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Seat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<long>("OrderItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("RowId")
                        .HasColumnType("bigint");

                    b.Property<int>("SeatStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.HasIndex("SeatStatusId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.SeatStatus", b =>
                {
                    b.Property<int>("SeatStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatStatusId");

                    b.ToTable("SeatStatus", (string)null);

                    b.HasData(
                        new
                        {
                            SeatStatusId = 0,
                            Name = "Available"
                        },
                        new
                        {
                            SeatStatusId = 1,
                            Name = "Booked"
                        },
                        new
                        {
                            SeatStatusId = 2,
                            Name = "Sold"
                        },
                        new
                        {
                            SeatStatusId = 3,
                            Name = "Unavailable"
                        });
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ManifestId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManifestId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.EventVenue", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Event", "Event")
                        .WithMany("EventVenues")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.Venue", "Venue")
                        .WithMany("EventVenues")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Order", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Event", "Event")
                        .WithMany("Orders")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.OrderItem", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.Price", "Price")
                        .WithMany("OrderItems")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Payment", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("ETicket.Db.Domain.Models.Payment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.PaymentStatus", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Row", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Section", "Section")
                        .WithMany("Rows")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Seat", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.OrderItem", "OrderItem")
                        .WithOne("Seat")
                        .HasForeignKey("ETicket.Db.Domain.Models.Seat", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.Row", "Row")
                        .WithMany("Seats")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETicket.Db.Domain.Models.SeatStatus", "SeatStatus")
                        .WithMany("Seats")
                        .HasForeignKey("SeatStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Row");

                    b.Navigation("SeatStatus");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Section", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Manifest", "Manifest")
                        .WithMany("Sections")
                        .HasForeignKey("ManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Venue", b =>
                {
                    b.HasOne("ETicket.Db.Domain.Models.Manifest", "Manifest")
                        .WithOne("Venue")
                        .HasForeignKey("ETicket.Db.Domain.Models.Venue", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manifest");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Event", b =>
                {
                    b.Navigation("EventVenues");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Manifest", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.OrderItem", b =>
                {
                    b.Navigation("Seat");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Price", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Row", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.SeatStatus", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Section", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ETicket.Db.Domain.Models.Venue", b =>
                {
                    b.Navigation("EventVenues");
                });
#pragma warning restore 612, 618
        }
    }
}
